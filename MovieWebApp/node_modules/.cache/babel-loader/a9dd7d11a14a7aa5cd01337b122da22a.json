{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"uN9KnldpqRIT2LwByiGz+Mp8wEw=\");\n\nexport default useInput; // const {\n//     value: capacity,\n//     isValid: capacityIsValid,\n//     hasError: capacityIsInvalid,\n//     valueChangeHandler: capacityChangeHandler,\n//     inputBlurHandler: capacityBlurHandler,\n//     reset: resetCapacity,\n// } = useInput((capacity) =>\n//     showingStatus === 'coming soon' ||\n//     (capacity > 30 && capacity <= 60));\n// const {\n//     value: timeSlot,\n//     isValid: timeSlotIsValid,\n//     hasError: timeSlotIsInvalid,\n//     valueChangeHandler: timeSlotChangeHandler,\n//     inputBlurHandler: timeSlotBlurHandler,\n//     reset: resetTimeSlot,\n// } = useInput((timeSlot) =>\n//     showingStatus === 'coming soon' ||\n//     (timeSlot != \"none\"));\n// const {\n//     value: screenNumber,\n//     isValid: screenNumberIsValid,\n//     hasError: screenNumberIsInvalid,\n//     valueChangeHandler: screenNumberChangeHandler,\n//     inputBlurHandler: screenNumberBlurHandler,\n//     reset: resetScreenNumber,\n// } = useInput((screenNumber) =>\n//     showingStatus === 'coming soon' ||\n//     (screenNumber != \"none\"));\n// const {\n//     value: price,\n//     isValid: priceIsValid,\n//     hasError: priceIsInvalid,\n//     valueChangeHandler: priceChangeHandler,\n//     inputBlurHandler: priceBlurHandler,\n//     reset: resetPrice,\n// } = useInput((price) =>\n//     showingStatus === 'coming soon' ||\n//     (price != \"none\"));","map":{"version":3,"sources":["C:/Users/docsa/OneDrive/Desktop/movieWebApp/MovieWebApp/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AAEHY,IAAAA,OAAO,EAAER,YAFN;AAGHC,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AAQH,CA5BD;;GAAMb,Q;;AA8BN,eAAeA,QAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useInput = (validateValue) => {\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueIsValid = validateValue(enteredValue);\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n    const valueChangeHandler = (event) => {\r\n        setEnteredValue(event.target.value);\r\n    };\r\n\r\n    const inputBlurHandler = (event) => {\r\n        setIsTouched(true);\r\n    };\r\n\r\n    const reset = () => {\r\n        setEnteredValue('');\r\n        setIsTouched(false);\r\n    };\r\n\r\n    return {\r\n        value: enteredValue,\r\n        isValid: valueIsValid,\r\n        hasError,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    };\r\n};\r\n\r\nexport default useInput;\r\n\r\n\r\n\r\n\r\n// const {\r\n//     value: capacity,\r\n//     isValid: capacityIsValid,\r\n//     hasError: capacityIsInvalid,\r\n//     valueChangeHandler: capacityChangeHandler,\r\n//     inputBlurHandler: capacityBlurHandler,\r\n//     reset: resetCapacity,\r\n// } = useInput((capacity) =>\r\n//     showingStatus === 'coming soon' ||\r\n//     (capacity > 30 && capacity <= 60));\r\n\r\n// const {\r\n//     value: timeSlot,\r\n//     isValid: timeSlotIsValid,\r\n//     hasError: timeSlotIsInvalid,\r\n//     valueChangeHandler: timeSlotChangeHandler,\r\n//     inputBlurHandler: timeSlotBlurHandler,\r\n//     reset: resetTimeSlot,\r\n// } = useInput((timeSlot) =>\r\n//     showingStatus === 'coming soon' ||\r\n//     (timeSlot != \"none\"));\r\n\r\n// const {\r\n//     value: screenNumber,\r\n//     isValid: screenNumberIsValid,\r\n//     hasError: screenNumberIsInvalid,\r\n//     valueChangeHandler: screenNumberChangeHandler,\r\n//     inputBlurHandler: screenNumberBlurHandler,\r\n//     reset: resetScreenNumber,\r\n// } = useInput((screenNumber) =>\r\n//     showingStatus === 'coming soon' ||\r\n//     (screenNumber != \"none\"));\r\n\r\n// const {\r\n//     value: price,\r\n//     isValid: priceIsValid,\r\n//     hasError: priceIsInvalid,\r\n//     valueChangeHandler: priceChangeHandler,\r\n//     inputBlurHandler: priceBlurHandler,\r\n//     reset: resetPrice,\r\n// } = useInput((price) =>\r\n//     showingStatus === 'coming soon' ||\r\n//     (price != \"none\"));"]},"metadata":{},"sourceType":"module"}