{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\docsa\\\\OneDrive\\\\Desktop\\\\movieWebApp\\\\MovieWebApp\\\\src\\\\Components\\\\Movies\\\\AddMovie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useCallback, usestate } from 'react';\nimport classes from './AddMovie.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddMovie(props) {\n  _s();\n\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://imdb-api.com/en/API/Title/k_d40xdze4/tt13429362');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      console.log(data, \" ---  app.js\");\n      const transformedMovies = {\n        id: data.id,\n        name: data.title,\n        plot: data.plot,\n        tagline: data.tagline,\n        releaseDate: data.releaseDate,\n        rating: data.imDbRating,\n        nowShowing: 'true' // ratingVotes: data.imDbRatingVotes\n\n      };\n      setMovie(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  function submitHandler(event) {\n    event.preventDefault(); // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value\n    };\n    props.onAddMovie(movie);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      width: \"500px\",\n      marginLeft: \"90px\"\n    },\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"id\",\n        children: \"IMDB id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"id\",\n        ref: titleRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        ref: titleRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"opening-text\",\n        children: \"Opening Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"5\",\n        id: \"opening-text\",\n        ref: openingTextRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Release Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"date\",\n        ref: releaseDateRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddMovie, \"huD15TM/spj+0Tkg5OyxUpPNwU0=\");\n\n_c = AddMovie;\nexport default AddMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"sources":["C:/Users/docsa/OneDrive/Desktop/movieWebApp/MovieWebApp/src/Components/Movies/AddMovie.js"],"names":["React","useRef","useCallback","usestate","classes","AddMovie","props","titleRef","openingTextRef","releaseDateRef","movie","setMovie","useState","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","console","log","transformedMovies","id","name","title","plot","tagline","releaseDate","rating","imDbRating","nowShowing","message","useEffect","submitHandler","event","preventDefault","current","value","openingText","onAddMovie","width","marginLeft","control"],"mappings":"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","sourcesContent":["import React, { useRef,useCallback,usestate } from 'react';\r\n\r\nimport classes from './AddMovie.module.css';\r\n\r\nfunction AddMovie(props) {\r\n    const titleRef = useRef('');\r\n    const openingTextRef = useRef('');\r\n    const releaseDateRef = useRef('');\r\n\r\n\r\n    const [movie, setMovie] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchMoviesHandler = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch('https://imdb-api.com/en/API/Title/k_d40xdze4/tt13429362');\r\n            if (!response.ok) {\r\n                throw new Error('Something went wrong!');\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(data, \" ---  app.js\")\r\n\r\n            const transformedMovies =\r\n            {\r\n                id: data.id,\r\n                name: data.title,\r\n                plot: data.plot,\r\n                tagline: data.tagline,\r\n                releaseDate: data.releaseDate,\r\n                rating: data.imDbRating,\r\n                nowShowing: 'true',\r\n                // ratingVotes: data.imDbRatingVotes\r\n            };\r\n\r\n            setMovie(transformedMovies);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMoviesHandler();\r\n    }, [fetchMoviesHandler]);\r\n\r\n    function submitHandler(event) {\r\n        event.preventDefault();\r\n\r\n        // could add validation here...\r\n\r\n        const movie = {\r\n            title: titleRef.current.value,\r\n            openingText: openingTextRef.current.value,\r\n            releaseDate: releaseDateRef.current.value,\r\n        };\r\n\r\n        props.onAddMovie(movie);\r\n    }\r\n\r\n    return (\r\n        <form  style={{width:\"500px\" , marginLeft:\"90px\"}} onSubmit={submitHandler}>\r\n            <div className={classes.control} >\r\n                <label htmlFor='id'>IMDB id</label>\r\n                <input type='text' id='id' ref={titleRef} />\r\n            </div>\r\n            <div className={classes.control}>\r\n                <label htmlFor='title'>Title</label>\r\n                <input type='text' id='title' ref={titleRef} />\r\n            </div>\r\n            <div className={classes.control}>\r\n                <label htmlFor='opening-text'>Opening Text</label>\r\n                <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\r\n            </div>\r\n            <div className={classes.control}>\r\n                <label htmlFor='date'>Release Date</label>\r\n                <input type='text' id='date' ref={releaseDateRef} />\r\n            </div>\r\n            <button>Add Movie</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddMovie;"]},"metadata":{},"sourceType":"module"}