{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\docsa\\\\OneDrive\\\\Desktop\\\\movieWebApp\\\\MovieWebApp\\\\src\\\\Components\\\\Movies\\\\AddMovie.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useRef, useCallback, useState, useEffect } from 'react';\nimport classes from './AddMovie.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddMovie(props) {\n  _s();\n\n  const titleRef = useRef('');\n  const idRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  let imdbID = idRef.current.value;\n  console.log(imdbID);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://imdb-api.com/en/API/Title/k_2e0orz7h/\" + imdbID);\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      console.log(data, \" --- hiuijo\");\n      const transformedMovies = {\n        id: data.id,\n        name: data.title,\n        plot: data.plot,\n        tagline: data.tagline,\n        releaseDate: data.releaseDate,\n        rating: data.imDbRating,\n        nowShowing: 'true' // ratingVotes: data.imDbRatingVotes\n\n      };\n      setMovie(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const onIDChangeHandler = event => {\n    console.log(event.target.value);\n    console.log(idRef.current.value);\n  };\n\n  function submitHandler(event) {\n    event.preventDefault(); // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value\n    };\n    props.onAddMovie(movie);\n  }\n\n  const idSubmitHandler = () => {\n    event.preventDefault();\n    console.log(idRef.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: idSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"id\",\n          children: \"IMDB id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"id\",\n          ref: idRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"submit ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      style: {\n        width: \"500px\",\n        marginLeft: \"90px\"\n      },\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          ref: titleRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"opening-text\",\n          children: \"Opening Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"5\",\n          id: \"opening-text\",\n          ref: openingTextRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"plot\",\n          children: \"plot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: movie.plot,\n          rows: \"5\",\n          id: \"plot\",\n          ref: openingTextRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Release Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: movie.releaseDate,\n          type: \"text\",\n          id: \"date\",\n          ref: releaseDateRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddMovie, \"cj2NxxTOVl7514LelIMRIomnMBo=\");\n\n_c = AddMovie;\nexport default AddMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"sources":["C:/Users/docsa/OneDrive/Desktop/movieWebApp/MovieWebApp/src/Components/Movies/AddMovie.js"],"names":["React","Fragment","useRef","useCallback","useState","useEffect","classes","AddMovie","props","titleRef","idRef","openingTextRef","releaseDateRef","movie","setMovie","isLoading","setIsLoading","error","setError","imdbID","current","value","console","log","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","id","name","title","plot","tagline","releaseDate","rating","imDbRating","nowShowing","message","onIDChangeHandler","event","target","submitHandler","preventDefault","openingText","onAddMovie","idSubmitHandler","control","width","marginLeft"],"mappings":"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","sourcesContent":["import React, { Fragment,useRef,useCallback,useState,useEffect } from 'react';\r\n\r\nimport classes from './AddMovie.module.css';\r\n\r\nfunction AddMovie(props) {\r\n    const titleRef = useRef('');\r\n    const idRef = useRef('');\r\n    const openingTextRef = useRef('');\r\n    const releaseDateRef = useRef('');\r\n\r\n\r\n    const [movie, setMovie] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    let imdbID = idRef.current.value;\r\n    console.log(imdbID)\r\n\r\n    const fetchMoviesHandler = useCallback(async () => {\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch(\"https://imdb-api.com/en/API/Title/k_2e0orz7h/\" + imdbID);\r\n            if (!response.ok) {\r\n                throw new Error('Something went wrong!');\r\n            }\r\n            const data = await response.json();\r\n            console.log(data, \" --- hiuijo\")\r\n\r\n            const transformedMovies =\r\n            {\r\n                id: data.id,\r\n                name: data.title,\r\n                plot: data.plot,\r\n                tagline: data.tagline,\r\n                releaseDate: data.releaseDate,\r\n                rating: data.imDbRating,\r\n                nowShowing: 'true',\r\n                // ratingVotes: data.imDbRatingVotes\r\n            };\r\n\r\n            setMovie(transformedMovies);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMoviesHandler();\r\n    }, [fetchMoviesHandler]);\r\n\r\n    const onIDChangeHandler= event =>{\r\n        console.log(event.target.value);\r\n        console.log(idRef.current.value)\r\n\r\n    }\r\n\r\n    function submitHandler(event) {\r\n        event.preventDefault();\r\n\r\n        // could add validation here...\r\n\r\n        const movie = {\r\n            title: titleRef.current.value,\r\n            openingText: openingTextRef.current.value,\r\n            releaseDate: releaseDateRef.current.value,\r\n        };\r\n\r\n        props.onAddMovie(movie);\r\n    }\r\n\r\n    const idSubmitHandler = ()=>{\r\n        event.preventDefault();\r\n                console.log(idRef.current.value)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={idSubmitHandler}>\r\n                <div className={classes.control} >\r\n                    <label htmlFor='id'>IMDB id</label>\r\n                    <input type='text' id='id' ref={idRef} />\r\n                </div>\r\n                <button>submit ID</button>\r\n        </form>\r\n        <form  style={{width:\"500px\" , marginLeft:\"90px\"}} onSubmit={submitHandler}>\r\n            {/* <div className={classes.control} >\r\n                <label htmlFor='id'>IMDB id</label>\r\n                <input type='text' id='id' ref={idRef} />\r\n            </div> */}\r\n            <div className={classes.control}>\r\n                <label htmlFor='title'>Title</label>\r\n                <input type='text' id='title' ref={titleRef} />\r\n            </div>\r\n            <div className={classes.control}>\r\n                <label htmlFor='opening-text'>Opening Text</label>\r\n                <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\r\n            </div>\r\n            <div className={classes.control}>\r\n                <label htmlFor='plot'>plot</label>\r\n                <textarea value={movie.plot} rows='5' id='plot' ref={openingTextRef}></textarea>\r\n            </div>\r\n            <div className={classes.control}>\r\n                <label htmlFor='date'>Release Date</label>\r\n                <input value={movie.releaseDate} type='text' id='date' ref={releaseDateRef} />\r\n            </div>\r\n            <button>Add Movie</button>\r\n        </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AddMovie;"]},"metadata":{},"sourceType":"module"}