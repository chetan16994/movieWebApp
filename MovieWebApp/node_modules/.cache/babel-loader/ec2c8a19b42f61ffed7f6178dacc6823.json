{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\docsa\\\\OneDrive\\\\Desktop\\\\movieWebApp\\\\MovieWebApp\\\\src\\\\Components\\\\Movies\\\\MoviesTemp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MovieTemp from './MovieTemp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoviesTemp = props => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const movieID = \"tt13429362\";\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://imdb-api.com/en/API/Title/k_d40xdze4/tt13429362');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      console.log(data, \" ---  in movies temp\");\n      const transformedMovies = {\n        id: data.id,\n        title: data.title,\n        overview: data.overview,\n        tagline: data.tagline,\n        releaseDate: data.releaseDate,\n        ratings: data\n      };\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  let content = /*#__PURE__*/_jsxDEV(MovieTemp, {\n    movies: movies\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 19\n  }, this); // let content = <p>Found no movies.</p>;\n  // if (movies.length > 0) {\n  //     content = <MovieListTemp movies={movies} />;\n  // }\n  // if (error) {\n  //     content = <p>{error}</p>;\n  // }\n  // if (isLoading) {\n  //     content = <p>Loading...</p>;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MoviesTemp, \"/djrXmupudGJZ4TEuxAjJK8qFwI=\");\n\n_c = MoviesTemp;\nexport default MoviesTemp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesTemp\");","map":{"version":3,"sources":["C:/Users/docsa/OneDrive/Desktop/movieWebApp/MovieWebApp/src/Components/Movies/MoviesTemp.js"],"names":["React","useState","useEffect","useCallback","MovieTemp","MoviesTemp","props","movies","setMovies","isLoading","setIsLoading","error","setError","movieID","fetchMoviesHandler","response","fetch","ok","Error","data","json","console","log","transformedMovies","id","title","overview","tagline","releaseDate","ratings","message","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;;AAGA,MAAMC,UAAU,GAAEC,KAAK,IAAE;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMY,OAAO,GAAE,YAAf;AACA,QAAMC,kBAAkB,GAAGX,WAAW,CAAC,YAAY;AAC/CO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,yDAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAiB,sBAAjB;AAEA,YAAMI,iBAAiB,GACnB;AACIC,QAAAA,EAAE,EAAEL,IAAI,CAACK,EADb;AAEIC,QAAAA,KAAK,EAAEN,IAAI,CAACM,KAFhB;AAGIC,QAAAA,QAAQ,EAAEP,IAAI,CAACO,QAHnB;AAIIC,QAAAA,OAAO,EAAER,IAAI,CAACQ,OAJlB;AAKAC,QAAAA,WAAW,EAAET,IAAI,CAACS,WALlB;AAMAC,QAAAA,OAAO,EAACV;AANR,OADJ;AAUAX,MAAAA,SAAS,CAACe,iBAAD,CAAT;AACH,KApBD,CAoBE,OAAOZ,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAACD,KAAK,CAACmB,OAAP,CAAR;AACH;;AACDpB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA3BqC,EA2BnC,EA3BmC,CAAtC;AA6BAR,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,kBAAkB;AACrB,GAFQ,EAEN,CAACA,kBAAD,CAFM,CAAT;;AAGA,MAAIiB,OAAO,gBAAG,QAAC,SAAD;AAAW,IAAA,MAAM,EAAExB;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAd,CArCqB,CAsCrB;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAEO,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,gBAAUiB;AAAV;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA5DD;;GAAM1B,U;;KAAAA,U;AA8DN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport MovieTemp from './MovieTemp';\r\n\r\n\r\nconst MoviesTemp =props=>{\r\n    const [movies, setMovies] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const movieID =\"tt13429362\";\r\n    const fetchMoviesHandler = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch('https://imdb-api.com/en/API/Title/k_d40xdze4/tt13429362');\r\n            if (!response.ok) {\r\n                throw new Error('Something went wrong!');\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(data,\" ---  in movies temp\")\r\n            \r\n            const transformedMovies = \r\n                {\r\n                    id: data.id,\r\n                    title: data.title,\r\n                    overview: data.overview,\r\n                    tagline: data.tagline,\r\n                releaseDate: data.releaseDate,\r\n                ratings:data\r\n                };\r\n\r\n            setMovies(transformedMovies);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMoviesHandler();\r\n    }, [fetchMoviesHandler]);\r\n    let content = <MovieTemp movies={movies} />;\r\n    // let content = <p>Found no movies.</p>;\r\n\r\n    // if (movies.length > 0) {\r\n    //     content = <MovieListTemp movies={movies} />;\r\n    // }\r\n\r\n    // if (error) {\r\n    //     content = <p>{error}</p>;\r\n    // }\r\n\r\n    // if (isLoading) {\r\n    //     content = <p>Loading...</p>;\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <section>\r\n                <button onClick={fetchMoviesHandler}>Fetch Movies</button>\r\n            </section>\r\n            <section>{content}</section>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MoviesTemp;"]},"metadata":{},"sourceType":"module"}