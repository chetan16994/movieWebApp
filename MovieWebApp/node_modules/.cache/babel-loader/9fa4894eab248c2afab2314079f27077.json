{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\docsa\\\\OneDrive\\\\Desktop\\\\movieWebApp\\\\MovieWebApp\\\\src\\\\Components\\\\Movies\\\\MoviesTemp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MovieTemp from './MovieTemp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst movieTemp = props => {\n  _s();\n\n  const [movie, setmovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchmovieHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://api.themoviedb.org/3/movie/471498?api_key=53d7c6ca3ef1087c442db10f34b46b8e');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      console.log(data);\n      console.log(data.id);\n      console.log(data.release_date);\n      console.log(data.title);\n      console.log(data.tagline);\n      console.log(data.overview);\n      const transformedmovie = {\n        id: data.id,\n        title: data.title,\n        overview: data.overview,\n        releaseDate: data.release_date\n      };\n      setmovie(transformedmovie);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchmovieHandler();\n  }, [fetchmovieHandler]);\n\n  let content = /*#__PURE__*/_jsxDEV(MovieTemp, {\n    movie: movie\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 19\n  }, this); // let content = <p>Found no movie.</p>;\n  // if (movie.length > 0) {\n  //     content = <MovieListTemp movie={movie} />;\n  // }\n  // if (error) {\n  //     content = <p>{error}</p>;\n  // }\n  // if (isLoading) {\n  //     content = <p>Loading...</p>;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchmovieHandler,\n        children: \"Fetch movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(movieTemp, \"HFvV5nDGRiy9U7e1woUrX2ZkZDI=\");\n\nexport default movieTemp;","map":{"version":3,"sources":["C:/Users/docsa/OneDrive/Desktop/movieWebApp/MovieWebApp/src/Components/Movies/MoviesTemp.js"],"names":["React","useState","useEffect","useCallback","MovieTemp","movieTemp","props","movie","setmovie","isLoading","setIsLoading","error","setError","fetchmovieHandler","response","fetch","ok","Error","data","json","console","log","id","release_date","title","tagline","overview","transformedmovie","releaseDate","message","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;;AAGA,MAAMC,SAAS,GAAEC,KAAK,IAAE;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMY,iBAAiB,GAAGV,WAAW,CAAC,YAAY;AAC9CO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oFAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,EAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACK,YAAjB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACM,KAAjB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACO,OAAjB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACQ,QAAjB;AACA,YAAMC,gBAAgB,GAClB;AACIL,QAAAA,EAAE,EAAEJ,IAAI,CAACI,EADb;AAEAE,QAAAA,KAAK,EAAEN,IAAI,CAACM,KAFZ;AAGAE,QAAAA,QAAQ,EAAER,IAAI,CAACQ,QAHf;AAIAE,QAAAA,WAAW,EAAEV,IAAI,CAACK;AAJlB,OADJ;AAQAf,MAAAA,QAAQ,CAACmB,gBAAD,CAAR;AACH,KAtBD,CAsBE,OAAOhB,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAACD,KAAK,CAACkB,OAAP,CAAR;AACH;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA7BoC,EA6BlC,EA7BkC,CAArC;AA+BAR,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;;AAGA,MAAIiB,OAAO,gBAAG,QAAC,SAAD;AAAW,IAAA,KAAK,EAAEvB;AAAlB;AAAA;AAAA;AAAA;AAAA,UAAd,CAvCoB,CAwCpB;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAEM,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,gBAAUiB;AAAV;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA9DD;;GAAMzB,S;;AAgEN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport MovieTemp from './MovieTemp';\r\n\r\n\r\nconst movieTemp =props=>{\r\n    const [movie, setmovie] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchmovieHandler = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch('https://api.themoviedb.org/3/movie/471498?api_key=53d7c6ca3ef1087c442db10f34b46b8e');\r\n            if (!response.ok) {\r\n                throw new Error('Something went wrong!');\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            console.log(data.id)\r\n            console.log(data.release_date)\r\n            console.log(data.title)\r\n            console.log(data.tagline)\r\n            console.log(data.overview)\r\n            const transformedmovie = \r\n                {\r\n                    id: data.id,\r\n                title: data.title,\r\n                overview: data.overview,\r\n                releaseDate: data.release_date,\r\n                };\r\n\r\n            setmovie(transformedmovie);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchmovieHandler();\r\n    }, [fetchmovieHandler]);\r\n    let content = <MovieTemp movie={movie} />;\r\n    // let content = <p>Found no movie.</p>;\r\n\r\n    // if (movie.length > 0) {\r\n    //     content = <MovieListTemp movie={movie} />;\r\n    // }\r\n\r\n    // if (error) {\r\n    //     content = <p>{error}</p>;\r\n    // }\r\n\r\n    // if (isLoading) {\r\n    //     content = <p>Loading...</p>;\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <section>\r\n                <button onClick={fetchmovieHandler}>Fetch movie</button>\r\n            </section>\r\n            <section>{content}</section>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default movieTemp;"]},"metadata":{},"sourceType":"module"}