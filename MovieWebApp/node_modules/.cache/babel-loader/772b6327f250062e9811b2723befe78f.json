{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\docsa\\\\OneDrive\\\\Desktop\\\\movieWebApp\\\\MovieWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Home from './Components/Home/Home';\nimport Header from './Components/Header/Header';\nimport Footer from './Components/Footer/Footer';\nimport Cart from './Components/Cart/Cart';\nimport CartProvider from './store/CartProvider';\nimport AddMovie from './Components/Movies/AddMovie';\nimport MoviesTemp from './Components/Movies/MoviesTemp';\nimport AddID from './Components/Movies/AddID';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_SLOTS = [['8-11 AM', 10.00], ['12-3 PM', 12.00], ['4-7 PM', 15.00], ['8-11 PM', 17.00]];\nconst DUMMY_MOVIES = [{\n  id: \"tt6341832\",\n  name: 'Oxygen',\n  releaseDate: '2019-04-12T12:48:55.000Z',\n  category: 'Horror',\n  rating: 8.0,\n  image: \"https://imdb-api.com/images/original/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_Ratio0.6762_AL_.jpg\" // 'oxygen-img'\n  ,\n  nowShowing: 'true',\n  theater: '3',\n  timing: DUMMY_SLOTS[0][0],\n  capacity: 60,\n  price: DUMMY_SLOTS[0][1]\n}, {\n  id: \"tt13429362\",\n  name: 'In the Earth',\n  releaseDate: '2018-04-12T12:48:55.000Z',\n  category: 'Horror',\n  rating: 7.0,\n  image: 'in the earth img',\n  nowShowing: 'true',\n  theater: '1',\n  timing: DUMMY_SLOTS[1][0],\n  capacity: 60,\n  price: DUMMY_SLOTS[1][1],\n  amount: 0\n}, {\n  id: \"tt0944947\",\n  name: 'Game Of Thrones',\n  releaseDate: '2021-04-12T12:48:55.000Z',\n  category: 'Drama',\n  rating: 9.0,\n  image: 'got-img',\n  nowShowing: 'true',\n  theater: '2',\n  timing: DUMMY_SLOTS[2][0],\n  capacity: 6,\n  price: DUMMY_SLOTS[2][1]\n}, {\n  id: \"tt12263384\",\n  name: 'Extraction 2',\n  releaseDate: '2020-04-12T12:48:55.000Z',\n  category: 'Action',\n  rating: 7.7,\n  image: 'extra2 img',\n  nowShowing: 'false',\n  theater: null,\n  timing: null,\n  capacity: null\n}];\n\nfunction App() {\n  _s();\n\n  const [movies, setMovies] = useState(DUMMY_MOVIES);\n  const [cartIsShown, setCartIsShown] = useState(false);\n\n  const showCartHandler = () => {\n    setCartIsShown(true);\n  };\n\n  const hideCartHandler = () => {\n    setCartIsShown(false);\n  };\n\n  const updateCapacityHandler = (id, amount) => {\n    const temp = movies.map(movie => {\n      if (movie.id === id) movie.capacity = movie.capacity - amount;\n      return movie;\n    });\n    setMovies(temp);\n  }; //  logic for api\n  // const [movie, setMovie] = useState([]);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch('https://imdb-api.com/en/API/Title/k_d40xdze4/tt13429362');\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n  //     const data = await response.json();\n  //     console.log(data, \" ---  app.js\")\n  //     const transformedMovies =\n  //     {\n  //       id: data.id,\n  //       name: data.title,\n  //       plot: data.plot,\n  //       tagline: data.tagline,\n  //       releaseDate: data.releaseDate,\n  //       rating: data.imDbRating,\n  //       nowShowing: 'true',\n  //       // ratingVotes: data.imDbRatingVotes\n  //     };\n  //     setMovie(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n  // useEffect(() => {\n  //   fetchMoviesHandler();\n  // }, [fetchMoviesHandler]);\n  //logic for upload to firebase\n\n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n    const response = await fetch('https://movie-react-16994-default-rtdb.firebaseio.com/movie.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  ; // console.log(movie)\n\n  return /*#__PURE__*/_jsxDEV(CartProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onShowCart: showCartHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), cartIsShown && /*#__PURE__*/_jsxDEV(Cart, {\n      onUpdateCartCapacity: updateCapacityHandler,\n      onClose: hideCartHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(Home, {\n      data: movies,\n      onUpdateCartCapacity: updateCapacityHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie // onAddMovie={addMovieHandler} \n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WsuwWqBY9+SzC90HFhTH5ce6VnY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/docsa/OneDrive/Desktop/movieWebApp/MovieWebApp/src/App.js"],"names":["useState","useEffect","useCallback","Home","Header","Footer","Cart","CartProvider","AddMovie","MoviesTemp","AddID","DUMMY_SLOTS","DUMMY_MOVIES","id","name","releaseDate","category","rating","image","nowShowing","theater","timing","capacity","price","amount","App","movies","setMovies","cartIsShown","setCartIsShown","showCartHandler","hideCartHandler","updateCapacityHandler","temp","map","movie","addMovieHandler","console","log","response","fetch","method","body","JSON","stringify","headers","data","json"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Home from './Components/Home/Home';\nimport Header from './Components/Header/Header';\nimport Footer from './Components/Footer/Footer';\nimport Cart from './Components/Cart/Cart';\nimport CartProvider from './store/CartProvider';\nimport AddMovie from './Components/Movies/AddMovie';\nimport MoviesTemp from './Components/Movies/MoviesTemp';\nimport AddID from './Components/Movies/AddID';\n\nconst DUMMY_SLOTS = [\n  ['8-11 AM',10.00],\n  ['12-3 PM',12.00],\n  ['4-7 PM',15.00],\n  ['8-11 PM',17.00]\n];\nconst DUMMY_MOVIES = [\n  {\n    id: \"tt6341832\",\n    name: 'Oxygen',\n    releaseDate: '2019-04-12T12:48:55.000Z',\n    category: 'Horror',\n    rating: 8.0,\n    image: \"https://imdb-api.com/images/original/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_Ratio0.6762_AL_.jpg\"\n    // 'oxygen-img'\n    ,\n    nowShowing: 'true',\n    theater: '3',\n    timing: DUMMY_SLOTS[0][0],\n    capacity: 60,\n    price: DUMMY_SLOTS[0][1]\n  },\n  {\n    id: \"tt13429362\",\n    name: 'In the Earth',\n    releaseDate: '2018-04-12T12:48:55.000Z',\n    category: 'Horror',\n    rating: 7.0,\n    image: 'in the earth img',\n    nowShowing: 'true',\n    theater: '1',\n    timing: DUMMY_SLOTS[1][0],\n    capacity: 60,\n    price: DUMMY_SLOTS[1][1],\n    amount: 0\n  },\n  {\n    id: \"tt0944947\",\n    name: 'Game Of Thrones',\n    releaseDate: '2021-04-12T12:48:55.000Z',\n    category: 'Drama',\n    rating: 9.0,\n    image: 'got-img',\n    nowShowing: 'true',\n    theater: '2',\n    timing: DUMMY_SLOTS[2][0],\n    capacity: 6,\n    price: DUMMY_SLOTS[2][1]\n  },\n  {\n    id: \"tt12263384\",\n    name: 'Extraction 2',\n    releaseDate: '2020-04-12T12:48:55.000Z',\n    category: 'Action',\n    rating: 7.7,\n    image: 'extra2 img',\n    nowShowing: 'false',\n    theater: null,\n    timing: null,\n    capacity: null\n  },\n];\n\nfunction App() {\n  const [movies,setMovies]=useState(DUMMY_MOVIES);\n  const [cartIsShown, setCartIsShown] = useState(false);\n\n  const showCartHandler = () => {\n    setCartIsShown(true);\n  };\n\n  const hideCartHandler = () => {\n    setCartIsShown(false);\n  };\n\n  const updateCapacityHandler = (id,amount) =>{\n    \n    const temp=movies.map((movie)=>{\n      if(movie.id===id) movie.capacity=movie.capacity-amount;\n      return movie;\n    });\n    setMovies(temp);\n  };\n\n  //  logic for api\n\n  // const [movie, setMovie] = useState([]);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n\n  // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch('https://imdb-api.com/en/API/Title/k_d40xdze4/tt13429362');\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n\n  //     const data = await response.json();\n  //     console.log(data, \" ---  app.js\")\n\n  //     const transformedMovies =\n  //     {\n  //       id: data.id,\n  //       name: data.title,\n  //       plot: data.plot,\n  //       tagline: data.tagline,\n  //       releaseDate: data.releaseDate,\n  //       rating: data.imDbRating,\n  //       nowShowing: 'true',\n  //       // ratingVotes: data.imDbRatingVotes\n  //     };\n\n  //     setMovie(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n  // useEffect(() => {\n  //   fetchMoviesHandler();\n  // }, [fetchMoviesHandler]);\n\n  //logic for upload to firebase\n  async function addMovieHandler(movie) {\n    console.log(movie);\n    const response = await fetch('https://movie-react-16994-default-rtdb.firebaseio.com/movie.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n\n  // console.log(movie)\n\n  return (\n    <CartProvider>\n      <Header onShowCart={showCartHandler} />\n      {cartIsShown && <Cart onUpdateCartCapacity={updateCapacityHandler} onClose={hideCartHandler} />}\n      <Home data={movies} onUpdateCartCapacity={updateCapacityHandler} />\n      <section>\n        <AddMovie \n        // onAddMovie={addMovieHandler} \n        />\n      </section>\n      \n      {/* <MoviesTemp /> */}\n      <Footer />\n    </CartProvider>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}